    // non recursion version. use constant extra space
    void connect(TreeLinkNode *root) 
    {
        if(root==NULL)
          return;
          
        root->next = NULL;
        
        TreeLinkNode *leftmostchild = root;
        
        TreeLinkNode *parent = root;
        
        while(leftmostchild) 
        {
            parent = leftmostchild;
            
            while(parent !=NULL && parent->left==NULL && parent->right==NULL)  // first non null parent node 
              parent = parent->next;
              
            if(parent==NULL) return;
            
            leftmostchild = parent->left ? parent->left : parent->right;
            
            TreeLinkNode *cur = leftmostchild;
            
            while(parent) 
            {
                if(cur==parent->left) 
                {  
                    if(parent->right) 
                    {
                        cur->next = parent->right;
                        cur = cur->next;
                    }
                    parent = parent->next;
                }
                else 
                {
                    if(cur==parent->right) 
                    { 
                      parent = parent->next;
                    }
                    else 
                    {  // cur is the child of the previous parent node
                        while(parent&&!parent->left && !parent->right)   // find the first parent node that has children to connect
                        {
                          parent = parent->next;
                        } 
                        
                        if(parent==NULL)  // no more child node to connet
                         break;
                        else
                        {
                            cur->next = parent->left ? parent->left : parent->right;    
                            cur = cur->next;
                        }
                        
                    }
                } 
            
                
            }// end while parent
       
        }//end while leftmostchild
    
       return;    
    }

    /* //recursion version
    void connect(TreeLinkNode *root) 
    {
        
        if(root==NULL)
          return;
        
        if(root->left==NULL&&root->right==NULL)
         return;
        
        if(root->next==NULL)
        {
          root->left->next = root->right;
          root->right->next= NULL;
        }
        
        if(root->next!=NULL)
        {
            root->left->next = root->right;
            root->right->next = root->next->left;
        }
          
        connect(root->left);
        connect(root->right);
        
    }
    */
        /*
        //bfs
    void connect(TreeLinkNode *root) 
    {
        if(root==NULL) return ;
        
        queue<TreeLinkNode *> curlevel;
        curlevel.push(root);
        
        while(true)
        {
            queue<TreeLinkNode *> nextlevel;
            
             TreeLinkNode * firstnode = curlevel.front();
             curlevel.pop();
                
            if(firstnode->left)
                  nextlevel.push(firstnode->left);
            if(firstnode->right)
                  nextlevel.push(firstnode->right);
                  
            TreeLinkNode * prevnode = firstnode;

            while(!curlevel.empty())
            {
                TreeLinkNode * node = curlevel.front();
                curlevel.pop();
                
                prevnode->next = node;
                prevnode = node;
                
                if(node->left)
                  nextlevel.push(node->left);
                if(node->right)
                  nextlevel.push(node->right);
            }
            
            prevnode->next =NULL;
            
            
            if(nextlevel.empty())
              break;
            curlevel.swap(nextlevel);
            
        }
        return ;
    }
        
    */
