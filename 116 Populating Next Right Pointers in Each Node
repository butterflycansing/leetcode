  void connect(TreeLinkNode *root) 
    {
        
        if(root==NULL)
          return;
        
        if(root->left==NULL&&root->right==NULL)
         return;
        
        if(root->next==NULL)
        {
          root->left->next = root->right;
          root->right->next= NULL;
        }
        
        if(root->next!=NULL)
        {
            root->left->next = root->right;
            root->right->next = root->next->left;
        }
          
        connect(root->left);
        connect(root->right);
    }
    
    
 //bfs
 void connect(TreeLinkNode *root) 
    {
        
        if(root==NULL) return ;
        
        
        queue<TreeLinkNode *> curlevel;
        curlevel.push(root);
        
        while(true)
        {
            queue<TreeLinkNode *> nextlevel;
            
             TreeLinkNode * firstnode = curlevel.front();
             curlevel.pop();
                
            if(firstnode->left)
                  nextlevel.push(firstnode->left);
            if(firstnode->right)
                  nextlevel.push(firstnode->right);
                  
            TreeLinkNode * prevnode = firstnode;

            while(!curlevel.empty())
            {
                TreeLinkNode * node = curlevel.front();
                curlevel.pop();
                
                prevnode->next = node;
                prevnode = node;
                
                if(node->left)
                  nextlevel.push(node->left);
                if(node->right)
                  nextlevel.push(node->right);
            }
            
            prevnode->next =NULL;
            
            
            if(nextlevel.empty())
              break;
            curlevel.swap(nextlevel);
            
        }
        return ;
