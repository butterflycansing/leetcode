 ListNode *mergeKLists(vector<ListNode *> &lists)
    {
        int n= lists.size();
         if(n==0)
            return NULL;
         
         // heap.  O(nlogn)
         
        priority_queue<ListNode*,vector<ListNode*>,mycomp>myheap;  // priority_queue pops the largest element. so need to implement mycompare.
        
        for(int i=0;i<n;i++)
        {
            if(lists[i]!=NULL)
             myheap.push(lists[i]);
        }
        
        ListNode* p = new ListNode(0);
        ListNode* newhead = p;
        
        while(!myheap.empty())
        {
            ListNode * node = myheap.top();
            myheap.pop();
            
            p->next = node;
            p = node;
            
            if(node->next!=NULL)
              myheap.push(node->next);
        }
        
        p->next=NULL;
        
        p=newhead;
        newhead = newhead->next;
        delete []p;
        
        return newhead;
        
    }
    
    struct mycomp
    {
     bool operator()(ListNode*p1,ListNode*p2) // priority_queue pops the largest element. so need to implement mycompare.
        {
            if(p1->val < p2->val)
                return false;
             else
                return true;
        }
    };

  ListNode *mergeKLists(vector<ListNode *> &lists)
    {
        //divide and conquer
        int n= lists.size();
         if(n==0)
            return NULL;
            
         if(n==1)
           return lists[0];
         
         if(n==2)
           return basemerge(lists[0],lists[1]);
         
         int m =n/2;
         
         vector<ListNode*> listsleft;
         vector<ListNode*> listsright;
         
         for(int i=0;i<=m;i++)
           listsleft.push_back(lists[i]);
         
         for(int i=m+1;i<n;i++)
           listsright.push_back(lists[i]);
          

        ListNode* left  = mergeKLists(listsleft);
        ListNode* right = mergeKLists(listsright);
         
         return basemerge(left,right);
      
    }
    
    //divide and conquer
     ListNode* basemerge(ListNode* l1,ListNode* l2)
     {
        if(l1==NULL&l2==NULL) return NULL;
         
        ListNode* newhead = new ListNode(0);
        ListNode* p = newhead;
        while (true)
        {
            if (!l1)
            {
                p->next = l2;
                break;
            }
            if (!l2)
            {
                p->next = l1;
                break;
            }
            if (l1->val < l2->val)
            {
                p->next = l1;
                l1 = l1->next;
            }
            else
            {
                p->next = l2;
                l2 = l2->next;
            }
            p = p->next;
        }

        p=newhead;
        newhead = newhead->next;
        delete []p;    
         
         return newhead;
     }
