vector<vector<int> > levelOrder(TreeNode *root) 
    {
          //bfs
        
        vector<vector<int>>res;
        
        if(root==NULL) return res;
        
        
        queue<TreeNode *> curlevel;
        curlevel.push(root);
        
        while(true)
        {
            queue<TreeNode *> nextlevel;

            vector<int> valuelevel;
               
            while(!curlevel.empty())
            {
                TreeNode * node = curlevel.front();
                curlevel.pop();
                
                if(node==NULL) continue;
                
                valuelevel.push_back(node->val);
                
                if(node->left)
                  nextlevel.push(node->left);
                if(node->right)
                  nextlevel.push(node->right);
   
            }
            
            
            res.push_back(valuelevel);
            
            if(nextlevel.empty())
              break;
            curlevel.swap(nextlevel);
            
        }
        return res;
        
        
    //dfs
    /*
       vector<vector<int> > output;  
       if(!root) return output;  
       vector<int> oneLine;  
       bool hasNextLevel=true;  
       int currentLevel =1;  
       
       while(hasNextLevel)  
        {  
          hasNextLevel = false;  
          LevelTravel(root, currentLevel, hasNextLevel, oneLine);  
          output.push_back(oneLine);  
          currentLevel ++;  
          oneLine.clear();  
        } 
        
        return output;  
      }  
      
      void LevelTravel  ( TreeNode* node,   int level, bool& hasNextLevel, vector<int>& oneLine)  
      {  
        if(!node) return;  
        
        if(level ==1)  
        {  
          oneLine.push_back(node->val);  
          if(node->left || node->right)  
            hasNextLevel = true;  
          return;  
        }  
        
        else  
        {  
          LevelTravel(node->left, level-1, hasNextLevel, oneLine);  
          LevelTravel(node->right, level-1, hasNextLevel, oneLine);  
        }  
     
     */
    }
